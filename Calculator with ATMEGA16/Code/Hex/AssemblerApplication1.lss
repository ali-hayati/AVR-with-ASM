
AVRASM ver. 2.2.7  C:\Users\ali\Desktop\AVR\Project\Calculate\Calculate\AssemblerApplication1\AssemblerApplication1\main.asm Sun Nov 10 20:18:27 2024

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m16def.inc'
C:\Users\ali\Desktop\AVR\Project\Calculate\Calculate\AssemblerApplication1\AssemblerApplication1\main.asm(3): Including file 'C:\Users\ali\Desktop\AVR\Project\Calculate\Calculate\AssemblerApplication1\AssemblerApplication1\delay01.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m16def.inc'
C:\Users\ali\Desktop\AVR\Project\Calculate\Calculate\AssemblerApplication1\AssemblerApplication1\main.asm(3): Including file 'C:\Users\ali\Desktop\AVR\Project\Calculate\Calculate\AssemblerApplication1\AssemblerApplication1\delay01.inc'
                                 
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m16def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega16
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega16
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M16DEF_INC_
                                 #define _M16DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega16
                                 #pragma AVRPART ADMIN PART_NAME ATmega16
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x94
                                 .equ	SIGNATURE_002	= 0x03
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SE	= 6	; Sleep Enable
                                 .equ	SM2	= 7	; Sleep Mode Select
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special function I/O register
                                 ;.equ	PSR10	= 0	; Prescaler reset
                                 .equ	PSR2	= 1	; Prescaler reset
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 16384
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1c00
                                 .equ	NRWW_STOP_ADDR	= 0x1fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1bff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x1f80
                                 .equ	SECONDBOOTSTART	= 0x1f00
                                 .equ	THIRDBOOTSTART	= 0x1e00
                                 .equ	FOURTHBOOTSTART	= 0x1c00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M16DEF_INC_ */
                                 
                                 
                                 #define __delay_ms__
                                 .include "delay01.inc"
                                 
                                 #define counter0 R16
                                 #define counter1 R17
                                 #define counter2 R18
                                 #define counter3 R19
                                 #define counter4 R20
                                 #define counter5 R21
                                 .EQU back_up_frequncy=$060
                                 ;********************************************************************************************************
                                 ;*************************************** decribe Stak ***************************************************
                                 ;********************************************************************************************************
                                 .ORG 0
000000 e004                      LDI stak_register,HIGH(RAMEND)
000001 bf0e                      OUT SPH,stak_register
000002 e50f                      LDI stak_register,LOW(RAMEND)
000003 bf0d                      OUT SPL,stak_register
                                 .CSEG
                                 ;*********************************************************************************************************
000004 e008                      LDI counter0,((ferquncy/1000000));we put on some frequncy into R21
000005 9300 0060                 STS back_up_frequncy,counter0;
                                 ;*********************************************************************************************************
                                 ;*********************************** the making a ms delay ***********************************************
                                 ;*********************************************************************************************************
                                 .MACRO delay_1ms
                                 	LDS counter0,back_up_frequncy
                                 L:
                                 	LDI counter1,250
                                 L1:
                                 	nop
                                 	DEC counter1
                                 BRNE L1
                                 	DEC counter0
                                 BRNE L
                                 .ENDMACRO
                                 	.MACRO delay_ms
                                 				PUSH counter0
                                 				PUSH counter1
                                 				PUSH counter2
                                 				PUSH counter3
                                 				PUSH counter4
                                 				PUSH counter5
                                 		LDI counter2,low(@0)
                                 		LDI counter3,BYTE2(@0)
                                 		LDI counter4,BYTE3(@0)
                                 		LDI counter5,BYTE4(@0)
                                 	l3:
                                 	delay_1ms
                                 		SUBI counter2,$01
                                 		SBCI counter3,$00
                                 		SBCI counter4,$00
                                 		SBCI counter5,$00
                                 	BRNE l3
                                 				POP counter5
                                 				POP counter4
                                 				POP counter3
                                 				POP counter2
                                 				POP counter1
                                 				POP counter0
                                 		
                                 	.ENDMACRO
                                 
                                 .def temp=R16
                                 .def Commonad_Lcd=R17
                                 .def x1=R18 //0~15
                                 .def y1=R19 //1 or 2
                                 .def keypad=R20
                                 .def num1=R21
                                 .def num2=R22
                                 .def ACC=R24
                                 .def count=R23
                                 #define RS_1 sbi PORTD,0
                                 #define RS_0 cbi PORTD,0
                                 #define E_1 sbi PORTD,1
                                 #define E_0 cbi PORTD,1
                                 #define DB4 PORTD.4
                                 #define DB5 PORTD.5
                                 #define DB6 PORTD.6
                                 #define DB7 PORTD.7
                                 #define data_lcd PORTD
                                 .equ ferquncy=8000000
                                 ; Replace with your application code
                                 
                                 start:
000007 e070                      ldi count,0x00
000008 940e 0121                 call LCD_Config
00000a 940e 0126                 call LCD_Init
00000c e032                      ldi y1,2
00000d e025                      ldi x1,5
00000e 940e 023d                 call lcd_location
                                 
000010 ef00                      ldi temp,0xF0
000011 bb0a                      out DDRA,temp
000012 e00f                      ldi temp,0x0f
000013 bb0b                      out PORTA,temp
                                 main:
000014 e070                      ldi count,0x00
                                 L1:
000015 940e 00c6                 call Keypad_Scan
000017 3340                      cpi keypad,0x30
000018 f3d8                      brlo main
000019 334b                      cpi keypad,0x3b
00001a f7cc                      brge main
                                 
                                 up_1:
00001b 2f14                      mov Commonad_Lcd,keypad
00001c 940e 01bb                 call lcd_data
00001e 940e 00bf                 call Function1
                                 up_2:
000020 940e 00c6                 call Keypad_Scan
000022 3073                      cpi count,3
000023 f008                      brlo Number1
000024 cffb                      rjmp up_2
                                 
                                 Number1:
000025 3340                      cpi keypad,0x30
000026 f078                      brlo Num1_End
000027 334b                      cpi keypad,0x3b
000028 f46c                      brge Num1_End
000029 2f14                      mov Commonad_Lcd,keypad
00002a 940e 01bb                 call lcd_data
00002c 940e 00bf                 call Function1
                                 up_3:
00002e 940e 00c6                 call Keypad_Scan
000030 3340                      cpi keypad,0x30
000031 f020                      brlo Num1_End
000032 334b                      cpi keypad,0x3b
000033 f414                      brge Num1_End
000034 940c 002e                 jmp up_3
                                 
                                 Num1_End:
000036 2f14                      mov Commonad_Lcd,keypad
000037 940e 01bb                 call lcd_data
000039 2f84                      mov ACC,keypad
                                 Num2_1:
00003a e070                      ldi count,0x00
                                 up_4:
00003b 940e 00c6                 call Keypad_Scan
00003d 3340                      cpi keypad,0x30
00003e f3d8                      brlo Num2_1
00003f 334b                      cpi keypad,0x3b
000040 f7cc                      brge Num2_1
000041 3072                      cpi count,2
000042 f008                      brlo Number2_2
000043 cff7                      rjmp up_4
                                 Number2_2:
000044 2f14                      mov Commonad_Lcd,keypad
000045 940e 01bb                 call lcd_data
000047 940e 00b8                 call Function2
                                 up_5:
000049 940e 00c6                 call Keypad_Scan
00004b 334b                      cpi keypad,0x3b
00004c f44c                      brge Num2_End
00004d 3073                      cpi count,3
00004e f010                      brlo Number2_3
00004f 940c 0049                 jmp up_5
                                 Number2_3:
000051 2f14                      mov Commonad_Lcd,keypad
000052 940e 01bb                 call lcd_data
000054 940e 00b8                 call Function2
                                 Num2_End:
000056 e31d                      ldi Commonad_Lcd,'='
000057 940e 01bb                 call lcd_data
000059 328b                      cpi ACC,'+'
00005a f041                      breq sum
00005b 328d                      cpi ACC,'-'
00005c f059                      breq sub1
00005d 328a                      cpi ACC,'*'
00005e f0b9                      breq mul1
00005f 328f                      cpi ACC,'/'
000060 f0d9                      breq div1
000061 940c 0056                 jmp Num2_End
                                 sum:
000063 1f56                      ADC num1,num2
000064 940e 00a7                 call ASCI
000066 940c 00a5                 jmp End
                                 
                                 sub1:
000068 1756                      cp num1,num2
000069 f43c                      brge sub2
00006a 1b65                      sub num2,num1
00006b e21d                      ldi Commonad_Lcd,'-'
00006c 940e 01bb                 call lcd_data
00006e 2f56                      mov num1,num2
00006f 940c 0072                 jmp N1
                                 sub2:
000071 1b56                      sub num1,num2
                                 N1:
000072 940e 00a7                 call ASCI
000074 940c 00a5                 jmp End
                                 
                                 mul1:
000076 9f56                      mul num1,num2
000077 2d50                      mov num1,R0
000078 940e 00a7                 call ASCI
00007a 940c 00a5                 jmp End
                                 
                                 div1:
00007c 2700                      clr temp
                                 div2:
00007d 0b56                      sbc num1, num2
00007e f018                      brlo div_end
00007f 9503                      inc temp
000080 940c 007d                 jmp div2
                                 div_end:
000082 0f56                      add num1,num2
                                 //
000083 2f60                      mov num2,temp
000084 e00a                      ldi temp,10
000085 1760                      cp num2,temp
000086 f48c                      brge div3
000087 950a                      dec temp
000088 956a                      dec num2
000089 e300                      ldi temp,48
00008a 1f60                      adc num2,temp
00008b 2f16                      mov Commonad_Lcd,num2
00008c 940e 01bb                 call lcd_data
00008e e21e                      ldi Commonad_Lcd,'.'
00008f 940e 01bb                 call lcd_data
000091 e300                      ldi temp,48
000092 1f50                      adc num1,temp
000093 2f15                      mov Commonad_Lcd,num1
000094 940e 01bb                 call lcd_data
000096 940c 00a5                 jmp End
                                 div3:
000098 2f05                      mov temp,num1
000099 2f56                      mov num1,num2
00009a 940e 00a7                 call ASCI
00009c e21e                      ldi Commonad_Lcd,'.'
00009d 940e 01bb                 call lcd_data
00009f 2f50                      mov num1,temp
0000a0 e300                      ldi temp,48
0000a1 1f50                      adc num1,temp
0000a2 2f15                      mov Commonad_Lcd,num1
0000a3 940e 01bb                 call lcd_data
                                 End:
0000a5 940c 00a5                 jmp End
                                 
                                 ASCI:
0000a7 2766                      clr num2              ; ????????? ?? ??? ???????
                                 div_loop:
0000a8 505a                          subi num1, 10     ; ?? ???? 10 ?? R16
0000a9 f010                          brlo end_div     ; ??? R16 ???? ?? 0 ???? ?? ?????? ????? ???
0000aa 9563                          inc num2          ; ?????? ?????????
0000ab cffc                          rjmp div_loop    ; ????? ????
                                 
                                 end_div:
0000ac 5f56                          subi num1, -10 
0000ad e300                      	ldi temp,48
0000ae 1f60                      	adc num2,temp
0000af 2f16                      	mov Commonad_Lcd,num2
0000b0 940e 01bb                 	call lcd_data
0000b2 e300                      	ldi temp,48
0000b3 1f50                      	adc num1,temp
0000b4 2f15                      	mov Commonad_Lcd,num1
0000b5 940e 01bb                 	call lcd_data
0000b7 9508                      	ret
                                 Function2:
0000b8 e00a                      ldi temp,10
0000b9 9f60                      mul num2,temp
0000ba 2d60                      mov num2,R0
0000bb 2f04                      mov temp,keypad
0000bc 5300                      subi temp,48
0000bd 1f60                      adc num2,temp
0000be 9508                      ret
                                 
                                 Function1:
0000bf e00a                      ldi temp,10
0000c0 9f50                      mul num1,temp
0000c1 2d50                      mov num1,R0
0000c2 2f04                      mov temp,keypad
0000c3 5300                      subi temp,48
0000c4 1f50                      adc num1,temp
0000c5 9508                      ret
                                 
                                 Keypad_Scan:
0000c6 e00f                      ldi temp,0x0f
0000c7 bb0b                      out PORTA,temp
0000c8 b309                      in temp,PINA
0000c9 700f                      ANDI temp,0x0f
0000ca 300f                      cpi temp,0x0f
0000cb f7d1                      brne Keypad_Scan
                                 up1:
0000cc b309                      in temp,PINA
0000cd 700f                      ANDI temp,0x0f
0000ce 300f                      cpi temp,0x0f
0000cf f3e1                      breq up1
0000d0 930f
0000d1 931f
0000d2 932f
0000d3 933f
0000d4 934f
0000d5 935f
0000d6 e025
0000d7 e030
0000d8 e040
0000d9 e050
0000da 9100 0060
0000dc ef1a
0000dd 0000
0000de 951a
0000df f7e9
0000e0 950a
0000e1 f7d1
0000e2 5021
0000e3 4030
0000e4 4040
0000e5 4050
0000e6 f799
0000e7 915f
0000e8 914f
0000e9 913f
0000ea 912f
0000eb 911f
0000ec 910f                      delay_ms 5
0000ed b309                      in temp,PINA
0000ee 700f                      ANDI temp,0x0f
0000ef 300f                      cpi temp,0x0f
0000f0 f2d9                      breq up1
0000f1 e70f                      ldi temp,0b01111111
0000f2 bb0b                      out PORTA,temp
0000f3 0000                      NOP
0000f4 b309                      in temp,PINA
0000f5 700f                      ANDi temp,0x0f
0000f6 300f                      cpi temp,0x0f
0000f7 f4a9                      Brne col1
0000f8 eb0f                      ldi temp,0b10111111
0000f9 bb0b                      out PORTA,temp
0000fa 0000                      NOP
0000fb b309                      in temp,PINA
0000fc 700f                      ANDi temp,0x0f
0000fd 300f                      cpi temp,0x0f
0000fe f489                      Brne col2
0000ff ed0f                      ldi temp,0b11011111
000100 bb0b                      out PORTA,temp
000101 0000                      NOP
000102 b309                      in temp,PINA
000103 700f                      ANDi temp,0x0f
000104 300f                      cpi temp,0x0f
000105 f469                      Brne col3
000106 ee0f                      ldi temp,0b11101111
000107 bb0b                      out PORTA,temp
000108 0000                      NOP
000109 b309                      in temp,PINA
00010a 700f                      ANDi temp,0x0f
00010b 300f                      cpi temp,0x0f
00010c f449                      Brne col4
                                 col1:
00010d e0e0                      ldi	R30,low(KCODE0<<1)
00010e e0f6                      ldi R31,high(KCODE0<<1)
00010f c009                      rjmp Find
                                 col2:
000110 e0e4                      ldi	R30,low(KCODE1<<1)
000111 e0f6                      ldi R31,high(KCODE1<<1)
000112 c006                      rjmp Find	
                                 col3:
000113 e0e8                      ldi	R30,low(KCODE2<<1)
000114 e0f6                      ldi R31,high(KCODE2<<1)
000115 c003                      rjmp Find
                                 col4:
000116 e0ec                      ldi	R30,low(KCODE3<<1)
000117 e0f6                      ldi R31,high(KCODE3<<1)
000118 c000                      rjmp Find
                                 Find:
000119 9506                      LSR temp
00011a f410                      BRCC Match 
00011b 9195                      lpm R25,Z+
00011c cffc                      rjmp Find
                                 Match:
00011d 9194                      lpm		R25,z
00011e 2f49                      mov keypad,R25
00011f 9573                      inc count
000120 9508                      ret
                                 
                                 LCD_Config:
000121 ef0f                      ldi temp,0xff
000122 bb01                      out DDRD,temp
000123 e000                      ldi temp,0x00
000124 bb02                      out PORTD,temp
000125 9508                      ret
                                 
                                 LCD_Init:
000126 e313                      ldi Commonad_Lcd,0x33
000127 940e 0139                 call lcd_commond
000129 e312                      ldi Commonad_Lcd,0x32
00012a 940e 0139                 call lcd_commond
00012c e218                      ldi Commonad_Lcd,0x28
00012d 940e 0139                 call lcd_commond
00012f e01c                      ldi Commonad_Lcd,0x0C//0000 1011
000130 940e 0139                 call lcd_commond
000132 e016                      ldi Commonad_Lcd,0x06
000133 940e 0139                 call lcd_commond
000135 e011                      ldi Commonad_Lcd,0x01
000136 940e 0139                 call lcd_commond
000138 9508                      ret
                                 
                                 lcd_commond:
000139 2f01                      mov temp,Commonad_Lcd
00013a 7f00                      andi temp,0xf0
00013b bb02                      out  data_lcd,temp
00013c 9890                      RS_0
00013d 9a91                      E_1
00013e 930f
00013f 931f
000140 932f
000141 933f
000142 934f
000143 935f
000144 e02a
000145 e030
000146 e040
000147 e050
000148 9100 0060
00014a ef1a
00014b 0000
00014c 951a
00014d f7e9
00014e 950a
00014f f7d1
000150 5021
000151 4030
000152 4040
000153 4050
000154 f799
000155 915f
000156 914f
000157 913f
000158 912f
000159 911f
00015a 910f                      delay_ms 10
00015b 9891                      E_0
00015c 930f
00015d 931f
00015e 932f
00015f 933f
000160 934f
000161 935f
000162 e02a
000163 e030
000164 e040
000165 e050
000166 9100 0060
000168 ef1a
000169 0000
00016a 951a
00016b f7e9
00016c 950a
00016d f7d1
00016e 5021
00016f 4030
000170 4040
000171 4050
000172 f799
000173 915f
000174 914f
000175 913f
000176 912f
000177 911f
000178 910f                      delay_ms 10
000179 2f01                      mov temp,Commonad_Lcd
00017a 700f                      andi temp,0x0f
00017b 9502                      swap temp
00017c bb02                      out data_lcd,temp
00017d 9890                      RS_0
00017e 9a91                      E_1
00017f 930f
000180 931f
000181 932f
000182 933f
000183 934f
000184 935f
000185 e02a
000186 e030
000187 e040
000188 e050
000189 9100 0060
00018b ef1a
00018c 0000
00018d 951a
00018e f7e9
00018f 950a
000190 f7d1
000191 5021
000192 4030
000193 4040
000194 4050
000195 f799
000196 915f
000197 914f
000198 913f
000199 912f
00019a 911f
00019b 910f                      delay_ms 10
00019c 9891                      E_0
00019d 930f
00019e 931f
00019f 932f
0001a0 933f
0001a1 934f
0001a2 935f
0001a3 e02a
0001a4 e030
0001a5 e040
0001a6 e050
0001a7 9100 0060
0001a9 ef1a
0001aa 0000
0001ab 951a
0001ac f7e9
0001ad 950a
0001ae f7d1
0001af 5021
0001b0 4030
0001b1 4040
0001b2 4050
0001b3 f799
0001b4 915f
0001b5 914f
0001b6 913f
0001b7 912f
0001b8 911f
0001b9 910f                      delay_ms 10
0001ba 9508                      ret
                                 
                                 lcd_data:
0001bb 2f01                      mov temp,Commonad_Lcd
0001bc 7f00                      andi temp,0xf0
0001bd bb02                      out  data_lcd,temp
0001be 9a90                      RS_1
0001bf 9a91                      E_1
0001c0 930f
0001c1 931f
0001c2 932f
0001c3 933f
0001c4 934f
0001c5 935f
0001c6 e02a
0001c7 e030
0001c8 e040
0001c9 e050
0001ca 9100 0060
0001cc ef1a
0001cd 0000
0001ce 951a
0001cf f7e9
0001d0 950a
0001d1 f7d1
0001d2 5021
0001d3 4030
0001d4 4040
0001d5 4050
0001d6 f799
0001d7 915f
0001d8 914f
0001d9 913f
0001da 912f
0001db 911f
0001dc 910f                      delay_ms 10
0001dd 9891                      E_0
0001de 930f
0001df 931f
0001e0 932f
0001e1 933f
0001e2 934f
0001e3 935f
0001e4 e02a
0001e5 e030
0001e6 e040
0001e7 e050
0001e8 9100 0060
0001ea ef1a
0001eb 0000
0001ec 951a
0001ed f7e9
0001ee 950a
0001ef f7d1
0001f0 5021
0001f1 4030
0001f2 4040
0001f3 4050
0001f4 f799
0001f5 915f
0001f6 914f
0001f7 913f
0001f8 912f
0001f9 911f
0001fa 910f                      delay_ms 10
0001fb 2f01                      mov temp,Commonad_Lcd
0001fc 700f                      andi temp,0x0f
0001fd 9502                      swap temp
0001fe bb02                      out data_lcd,temp
0001ff 9a90                      RS_1
000200 9a91                      E_1
000201 930f
000202 931f
000203 932f
000204 933f
000205 934f
000206 935f
000207 e02a
000208 e030
000209 e040
00020a e050
00020b 9100 0060
00020d ef1a
00020e 0000
00020f 951a
000210 f7e9
000211 950a
000212 f7d1
000213 5021
000214 4030
000215 4040
000216 4050
000217 f799
000218 915f
000219 914f
00021a 913f
00021b 912f
00021c 911f
00021d 910f                      delay_ms 10
00021e 9891                      E_0
00021f 930f
000220 931f
000221 932f
000222 933f
000223 934f
000224 935f
000225 e02a
000226 e030
000227 e040
000228 e050
000229 9100 0060
00022b ef1a
00022c 0000
00022d 951a
00022e f7e9
00022f 950a
000230 f7d1
000231 5021
000232 4030
000233 4040
000234 4050
000235 f799
000236 915f
000237 914f
000238 913f
000239 912f
00023a 911f
00023b 910f                      delay_ms 10
00023c 9508                      ret
                                 
                                 lcd_location:
00023d 3031                      cpi y1,1 //pc=1
00023e f409                      brne l2
00023f e830                      ldi y1,0x80
                                 l2:
000240 3032                      cpi y1,2// PC=2
000241 f451                      brne l3
000242 ec30                      ldi y1,0xC0			//pC=3
000243 0f32                      add y1,x1
000244 2f13                      mov Commonad_Lcd,y1
000245 940e 0139                 call lcd_commond 
000247 9508                      ret
                                 
                                 lcd_clr:
000248 e011                      ldi Commonad_Lcd,0x01
000249 940e 0139                 call lcd_commond
00024b 9508                      ret
                                 
                                 l3:
00024c cdc8                      rjmp l1
                                 
                                 .org 0x300 
                                 
000300 2a2f
000301 2b2d                      KCODE0: .db '/', '*', '-', '+'
000302 3639
000303 3d33                      KCODE1: .db '9', '6', '3', '='
000304 3538
000305 3032                      KCODE2: .db '8', '5', '2', '0'
000306 3437


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16" register use summary:
x  :   0 y  :   0 z  :   2 r0 :   3 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 124 r17:  62 r18:  38 r19:  43 r20:  54 
r21:  59 r22:  21 r23:   7 r24:   5 r25:   3 r26:   0 r27:   0 r28:   0 
r29:   0 r30:   4 r31:   4 
Registers used: 14 out of 35 (40.0%)

"ATmega16" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   8 add   :   2 adiw  :   0 and   :   0 
andi  :  11 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  :   6 brge  :   7 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 brlt  :   0 brmi  :   0 
brne  :  34 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  38 cbi   :   6 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   2 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   2 cpc   :   0 
cpi   :  25 cpse  :   0 dec   :  20 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   7 inc   :   3 jmp   :  10 
ld    :   0 ldd   :   0 ldi   :  91 lds   :   9 lpm   :   3 lsl   :   0 
lsr   :   1 mov   :  27 movw  :   0 mul   :   3 muls  :   0 mulsu :   0 
neg   :   0 nop   :  13 or    :   0 ori   :   0 out   :  15 pop   :  54 
push  :  54 rcall :   0 ret   :  10 reti  :   0 rjmp  :   9 rol   :   0 
ror   :   0 sbc   :   1 sbci  :  27 sbi   :   6 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   1 
sub   :   2 subi  :  13 swap  :   2 tst   :   0 wdr   :   0 
Instructions used: 36 out of 113 (31.9%)

"ATmega16" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000610   1178     16   1194   16384   7.3%
[.dseg] 0x000060 0x000060      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
